{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","latest","setLatest","results","setResults","searchCountries","setSearchCountries","useEffect","axios","all","get","then","responseArr","data","catch","err","console","log","lastUpdated","Date","parseInt","updated","toString","countries","filter","item","country","toLowerCase","includes","map","i","Card","key","bg","text","className","style","margin","Img","variant","src","countryInfo","flag","Body","Title","Text","cases","deaths","recovered","todayCases","todayDeaths","active","critical","Footer","textAlign","CardDeck","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.bfb8355e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from \"axios\";\n//import CardColumns from 'react-bootstrap/CardColumns';\nimport Columned from 'react-columned';\nimport Form from 'react-bootstrap/Form';\n\n\n\nfunction App() {\nconst [latest, setLatest] = useState([]);\nconst [results, setResults] = useState([]);\nconst [searchCountries, setSearchCountries] = useState(\"\");\n\n\n  useEffect(() => {\n    axios\n    .all([\n      axios.get(\"https://disease.sh/v2/all\"),\n      axios.get(\"https://disease.sh/v2/countries\")\n\n    ])\n    .then(responseArr => {\n    setLatest(responseArr[0].data);\n    setResults(responseArr[1].data);\n\n  })\n  .catch(err=> {\n    console.log(err);\n  });\n\n  }, []);\n\n  const date = new Date(parseInt(latest.updated));\n  const lastUpdated = date.toString();\n  const filterCountries = results.filter(item => {\n  \n  return searchCountries !== \"\" ? item.country.toLowerCase().includes(searchCountries) : item;\n  });\n\n\n  const countries =filterCountries.map((data, i)  => {\n    return (\n      <Card key ={i} bg=\"light\" text=\"dark\" className=\"text-center\" style={{margin: \"10px\"}}>\n    <Card.Img variant=\"top\" src={data.countryInfo.flag}/>\n    <Card.Body>\n      <Card.Title>{data.country}</Card.Title>\n      <Card.Text> Cases: {data.cases}</Card.Text>\n      <Card.Text> Deaths: {data.deaths}</Card.Text>\n      <Card.Text> Recovered: {data.recovered}</Card.Text>\n      <Card.Text> Today's cases: {data.todayCases}</Card.Text>\n      <Card.Text> Today's deaths: {data.todayDeaths}</Card.Text>\n      <Card.Text> Active: {data.active}</Card.Text>\n      <Card.Text> Critical: {data.critical}</Card.Text>\n\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated {lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n    )\n  })  \n\n  /*var queries = [{\n    columned: 2,\n    query: 'min-width:500px'\n  }, {\n    columned: 3,\n    query: 'min-width: 1000px'\n  \n  }];\n*/\n  return (\n  <div>\n    <br />\n    <h2 style={{textAlign: \"center\"}}> COVID-19 Live Stats</h2>\n    <br />\n    <CardDeck>\n  <Card bg=\"info\" text=\"white\" className=\"text-center\" style={{margin: \"10px\"}}>\n    <Card.Body>\n      <Card.Title>Cases</Card.Title>\n      <Card.Text> {latest.cases}</Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated {lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n\n  <Card bg=\"danger\" text=\"white\" className=\"text-center\" style={{margin: \"10px\"}}> \n    <Card.Body>\n      <Card.Title>Deaths</Card.Title>\n      <Card.Text>\n      {latest.deaths}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated {lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n\n  <Card bg=\"success\" text=\"white\" className=\"text-center\" style={{margin: \"10px\"}}>\n    <Card.Body>\n      <Card.Title>Recovered</Card.Title>\n      <Card.Text>\n      {latest.recovered}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated {lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n</CardDeck>\n<br />\n\n<Form style={{margin: \"10px\"}}>\n  <Form.Group controlId=\"formGroupSearch\" >\n    \n    <Form.Control type=\"text\" placeholder=\"Search country\" \n    onChange= {e =>setSearchCountries(e.target.value)}\n      />\n  </Form.Group>\n  \n</Form>\n<Columned /*queries={queries}*/>{countries}</Columned>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}